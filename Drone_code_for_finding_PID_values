//removed delay in loop function
// put the gyro claiberated value
//add motor hz 


#include <ESP32Servo.h>
#include <Adafruit_NeoPixel.h>
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Wire.h>
#include <WiFi.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <SPIFFS.h>


const char* ssid = "********";
const char* password = "*********";


#define ESC_PIN1 5  // Front Right (CCW) ESC_PIN2 10
#define ESC_PIN2 11   // Rear Right (CW) ESC_PIN4  4
#define ESC_PIN3 12  // Rear Left (CCW)  ESC_PIN3 38
#define ESC_PIN4 4  // Front Left (CW)   ESC_PIN1 12
Servo esc1,esc2,esc3,esc4;
int ESCfreq = 400;
float t=0.004; 


# define SDA_pin 1
# define SCL_pin 2
float RateRoll, RatePitch, RateYaw;
float RateCalibrationRoll, RateCalibrationPitch,RateCalibrationYaw;
int RateCalibrationNumber;
float AccX, AccY, AccZ;
float AngleRoll, AnglePitch;

void gyro_signals(void) {
  
//Start I2C communication
  Wire.beginTransmission(0x68);
  
//Switch on the lowpass filter
  Wire.write(0x1A);
  Wire.write(0x05);
  Wire.endTransmission(); 

  Wire.beginTransmission(0x68);
  Wire.write(0x1C);
  Wire.write(0x10);
  Wire.endTransmission();

  Wire.beginTransmission(0x68);
  Wire.write(0x3B);
  Wire.endTransmission();
  Wire.requestFrom(0x68,6);
  int16_t AccXLSB = Wire.read() << 8 | Wire.read();
  int16_t AccYLSB = Wire.read() << 8 | Wire.read();
  int16_t AccZLSB = Wire.read() << 8 | Wire.read();

//Set the sensitivity scale factor
  Wire.beginTransmission(0x68);
  Wire.write(0x1B);
  Wire.write(0x8);
  Wire.endTransmission();

//Access registers storing gyro
  Wire.beginTransmission(0x68);
  Wire.write(0x43);
  Wire.endTransmission();

//Read the gyro measurements
  Wire.requestFrom(0x68,6);
  int16_t GyroX=Wire.read()<<8 | Wire.read();
  int16_t GyroY=Wire.read()<<8 | Wire.read();
  int16_t GyroZ=Wire.read()<<8 | Wire.read();

//Convert the measurement units to Â°/s
  RateRoll = ((float)GyroX / 65.5) - 0.26;
  RatePitch = ((float)GyroY / 65.5) + 1.65;
  RateYaw = ((float)GyroZ / 65.5) + 0.70;

  AccX=(float)AccXLSB/4096 - 0.10;
  AccY=(float)AccYLSB/4096 - 0.045;
  AccZ=(float)AccZLSB/4096 + 0.06;

  AngleRoll=atan(AccY/sqrt(AccX*AccX+AccZ*AccZ))*1/(3.142/180);
  AnglePitch=-atan(AccX/sqrt(AccY*AccY+AccZ*AccZ))*1/(3.142/180);

}



// Define NRF24L01+ pins
#define CE_PIN  6          //7
#define SCK_PIN 7          //5
#define MISO_PIN 8         //6
#define CSN_PIN 9          //9
#define MOSI_PIN 10         //8

RF24 radio(CE_PIN, CSN_PIN); // Create RF24 object
const byte address[6] = "00001";  // Must match transmitter

// Data structure for receiving drone control signals
struct DroneData {
  int throttle;
  int yaw;
  int pitch;
  int roll;
} __attribute__((packed));

DroneData receivedData;  // Store received values


uint32_t LoopTimer;



float DesiredRateRoll, DesiredRatePitch,DesiredRateYaw;
float ErrorRateRoll, ErrorRatePitch, ErrorRateYaw;
float InputRoll, InputThrottle, InputPitch, InputYaw;
float PrevErrorRateRoll, PrevErrorRatePitch,PrevErrorRateYaw;
float PrevItermRateRoll, PrevItermRatePitch,PrevItermRateYaw;
float PIDReturn[]={0, 0, 0};

float PRateRoll=0 ; float PRatePitch=PRateRoll;
float IRateRoll=0 ; float IRatePitch=IRateRoll;
float DRateRoll=0 ; float DRatePitch=DRateRoll;

float PRateYaw=0;
float IRateYaw=0;
float DRateYaw=0;
float MotorInput1, MotorInput2, MotorInput3,MotorInput4;

float DesiredAngleRoll, DesiredAnglePitch;
float ErrorAngleRoll, ErrorAnglePitch;
float PrevErrorAngleRoll, PrevErrorAnglePitch;
float PrevItermAngleRoll, PrevItermAnglePitch;

float PAngleRoll=0; float PAnglePitch=PAngleRoll;
float IAngleRoll=0; float IAnglePitch=IAngleRoll;
float DAngleRoll=0; float DAnglePitch=DAngleRoll;

void pid_equation(float Error, float P , float I, float D,
  float PrevError, float PrevIterm) {
  float Pterm=P*Error;
  float Iterm=PrevIterm+I*(Error+ PrevError)*0.004/2;
  if (Iterm > 400) Iterm=400;
  else if (Iterm <-400) Iterm=-400;
  float Dterm=D*(Error-PrevError)/0.004;
  float PIDOutput= Pterm+Iterm+Dterm;
  if (PIDOutput>400) PIDOutput=400;
  else if (PIDOutput <-400) PIDOutput=-400;
  PIDReturn[0]=PIDOutput;
  PIDReturn[1]=Error;
  PIDReturn[2]=Iterm;
}

void reset_pid(void) {
  PrevErrorRateRoll=0; PrevErrorRatePitch=0;
  PrevErrorRateYaw=0;
  PrevItermRateRoll=0; PrevItermRatePitch=0;
  PrevItermRateYaw=0;

  PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;
  PrevItermAngleRoll=0; PrevItermAnglePitch=0;
}


float KalmanAngleRoll=0,KalmanUncertaintyAngleRoll=2*2;
float KalmanAnglePitch=0,KalmanUncertaintyAnglePitch=2*2;
float Kalman1DOutput[]={0,0};

void kalman_1d(float KalmanState,float KalmanUncertainty, float KalmanInput,float KalmanMeasurement) {
  KalmanState=KalmanState+0.004*KalmanInput;
  KalmanUncertainty=KalmanUncertainty + (0.004* 0.004 * 4 * 4);
  float KalmanGain=KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3);
  KalmanState=KalmanState+KalmanGain * (KalmanMeasurement-KalmanState);
  KalmanUncertainty=(1-KalmanGain) *KalmanUncertainty;

  Kalman1DOutput[0]=KalmanState;
  Kalman1DOutput[1]=KalmanUncertainty;
}

float complementaryAngleRoll = 0.0f;
float complementaryAnglePitch = 0.0f;


#define LED_PIN    21   // GPIO pin connected to the RGB LED
#define LED_COUNT  1    // Number of LEDs
// Initialize the NeoPixel strip
Adafruit_NeoPixel strip(LED_COUNT, LED_PIN, NEO_RGB + NEO_KHZ800);

void setRGBColor(uint8_t r, uint8_t g, uint8_t b) {
  strip.setPixelColor(0, strip.Color(r, g, b));  // Set RGB values
  strip.show();  
}

//WIFI tuning global code
AsyncWebServer server(80);


const char* PARAM_P_GAIN = "pGain";   //For Pitch & Roll RATE
const char* PARAM_I_GAIN = "iGain";
const char* PARAM_D_GAIN = "dGain";

const char* PARAM_P_A_GAIN = "pAGain";   //For Pitch & Roll ANGLE
const char* PARAM_I_A_GAIN = "iAGain";
const char* PARAM_D_A_GAIN = "dAGain";

const char* PARAM_P_YAW = "pYaw";     //For Yaw
const char* PARAM_I_YAW = "iYaw";
const char* PARAM_D_YAW = "dYaw";

const char* PARAM_TIME_CYCLE = "tc";  //Computation time cycle

// HTML web page to handle 6 input fields of PID gains
const char index_html[] PROGMEM = R"rawliteral(
<!DOCTYPE HTML><html><head>
  <title>ESP Input Form</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script>
    function submitMessage() {
      alert("Saved value to ESP SPIFFS");
      setTimeout(function(){ document.location.reload(false); }, 500);
    }
  </script></head><body>

     <form action="/get" target="hidden-form"><br>
    ESP32 Webserver for PID Gain value tuning of Quadcopter 
  </form><br><br>

  <form action="/get" target="hidden-form">
    P Pitch & Roll Gain (current value %pGain%): <input type="number" step="any" name="pGain">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
  <form action="/get" target="hidden-form">
    I Pitch & Roll Gain (current value %iGain%): <input type="number" step="any" name="iGain">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
  <form action="/get" target="hidden-form">
    D Pitch & Roll Gain (current value %dGain%): <input type="number" step="any" name="dGain">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
  <form action="/get" target="hidden-form">
    P Pitch & Roll Angle Gain (current value %pAGain%): <input type="number" step="any" name="pAGain">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
    <form action="/get" target="hidden-form">
    I Pitch & Roll Angle Gain (current value %iAGain%): <input type="number" step="any" name="iAGain">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
    <form action="/get" target="hidden-form">
    D Pitch & Roll Angle Gain (current value %dAGain%): <input type="number" step="any" name="dAGain">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
  <form action="/get" target="hidden-form">
    P Yaw Gain (current value %pYaw%): <input type="number" step="any" name="pYaw">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
  <form action="/get" target="hidden-form">
    I Yaw Gain (current value %iYaw%): <input type="number" step="any" name="iYaw">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br>
  <form action="/get" target="hidden-form">
    D Yaw Gain (current value %dYaw%): <input type="number" step="any" name="dYaw">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br><br>
    <form action="/get" target="hidden-form">
    Time cycle (current value %tc%): <input type="number" step="any" name="tc">
    <input type="submit" value="Submit" onclick="submitMessage()">
  </form><br><br>

  <iframe style="display:none" name="hidden-form"></iframe>
</body></html>)rawliteral";

void notFound(AsyncWebServerRequest *request) {
  request->send(404, "text/plain", "Not found");
}

String readFile(fs::FS &fs, const char * path){
//  Serial.printf("Reading file: %s\r\n", path);
  File file = fs.open(path, "r");
  if(!file || file.isDirectory()){
    Serial.println("- empty file or failed to open file");
    return String();
  }
//  Serial.println("- read from file:");
  String fileContent;
  while(file.available()){
    fileContent+=String((char)file.read());
  }
  file.close();
  Serial.println(fileContent);
  return fileContent;
}

void writeFile(fs::FS &fs, const char * path, const char * message){
  Serial.printf("Writing file: %s\r\n", path);
  File file = fs.open(path, "w");
  if(!file){
    Serial.println("- failed to open file for writing");
    return;
  }
  if(file.print(message)){
    Serial.println("- file written");
  } else {
    Serial.println("- write failed");
  }
  file.close();
}

// Replaces placeholder with stored values
String processor(const String& var){
  //Serial.println(var);
if(var == "pGain"){
    return readFile(SPIFFS, "/pGain.txt");
}
else if(var == "iGain"){
    return readFile(SPIFFS, "/iGain.txt");
}
else if(var == "dGain"){
    return readFile(SPIFFS, "/dGain.txt");
}
else if(var == "pAGain"){
    return readFile(SPIFFS, "/pAGain.txt");
}
else if(var == "iAGain"){
    return readFile(SPIFFS, "/iAGain.txt");
}
else if(var == "dAGain"){
    return readFile(SPIFFS, "/dAGain.txt");
}
else if(var == "pYaw"){
    return readFile(SPIFFS, "/pYaw.txt");
}
else if(var == "dYaw"){
    return readFile(SPIFFS, "/dYaw.txt");
}
else if(var == "iYaw"){
    return readFile(SPIFFS, "/iYaw.txt");
}
else if(var == "tc"){
    return readFile(SPIFFS, "/tc.txt");
}

}


unsigned long lastCheckTime = 0;
const unsigned long checkInterval = 10000;

void checkSystemHealth() {
  bool allGood = true;

  if (WiFi.status() != WL_CONNECTED) {
    allGood = false;
  }

  if (!radio.isChipConnected()) {
    allGood = false;
  }



  // LED Indicator
  if (allGood) {
    for (int i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(0, 255, 0));  // Green
    }
  } else {
    for (int i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(255, 0, 0));  // Red
    }
  }
  strip.show();
}



void setup() {
  Serial.begin(115200);
  
  
  Serial.println("ESC Calibration Started...");
  esc1.attach(ESC_PIN1, 1000, 2000);  // Attach ESC with min and max pulse width
  esc2.attach(ESC_PIN2, 1000, 2000);
  esc3.attach(ESC_PIN3, 1000, 2000);
  esc4.attach(ESC_PIN4, 1000, 2000);

  Serial.println("Setting max throttle...");
  esc1.writeMicroseconds(2000);  // Send max throttle signal
  esc2.writeMicroseconds(2000);
  esc3.writeMicroseconds(2000);
  esc4.writeMicroseconds(2000);
  delay(3000);  // Wait for ESC to register

  Serial.println("Setting min throttle...");
  esc1.writeMicroseconds(1000);  // Send min throttle signal
  esc2.writeMicroseconds(1000);
  esc3.writeMicroseconds(1000);
  esc4.writeMicroseconds(1000);
  delay(3000);  // Wait for ESC confirmation

  Serial.println("ESC Calibration Completed!");


  #ifdef ESP32
    if(!SPIFFS.begin(true)){
      Serial.println("An Error has occurred while mounting SPIFFS");
      return;
    }
  #else
    if(!SPIFFS.begin()){
      Serial.println("An Error has occurred while mounting SPIFFS");
      return;
    }
  #endif
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  if (WiFi.waitForConnectResult() != WL_CONNECTED) {
    Serial.println("WiFi Failed!");
    return;
  }
  Serial.println();
  Serial.print("IP Address: ");

  Serial.println(WiFi.localIP());
  delay(2000);
  // Send web page with input fields to client
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send_P(200, "text/html", index_html, processor);
  });

  // Send a GET request to <ESP_IP>/get?inputString=<inputMessage>
  server.on("/get", HTTP_GET, [] (AsyncWebServerRequest *request) {
    String inputMessage;
    // GET P Gain value on <ESP_IP>/get?pGain=<inputMessage>
if (request->hasParam(PARAM_P_GAIN)) {
    inputMessage = request->getParam(PARAM_P_GAIN)->value();
    writeFile(SPIFFS, "/pGain.txt", inputMessage.c_str());
}
// GET I Gain value on <ESP_IP>/get?iGain=<inputMessage>
else if (request->hasParam(PARAM_I_GAIN)) {
    inputMessage = request->getParam(PARAM_I_GAIN)->value();
    writeFile(SPIFFS, "/iGain.txt", inputMessage.c_str());
}
// GET D Gain value on <ESP_IP>/get?dGain=<inputMessage>
else if (request->hasParam(PARAM_D_GAIN)) {
    inputMessage = request->getParam(PARAM_D_GAIN)->value();
    writeFile(SPIFFS, "/dGain.txt", inputMessage.c_str());
}
else if (request->hasParam(PARAM_P_A_GAIN)) {
    inputMessage = request->getParam(PARAM_P_A_GAIN)->value();
    writeFile(SPIFFS, "/pAGain.txt", inputMessage.c_str());
}
else if (request->hasParam(PARAM_I_A_GAIN)) {
    inputMessage = request->getParam(PARAM_I_A_GAIN)->value();
    writeFile(SPIFFS, "/iAGain.txt", inputMessage.c_str());
}
else if (request->hasParam(PARAM_D_A_GAIN)) {
    inputMessage = request->getParam(PARAM_D_A_GAIN)->value();
    writeFile(SPIFFS, "/dAGain.txt", inputMessage.c_str());
}
else if (request->hasParam(PARAM_P_YAW)) {
    inputMessage = request->getParam(PARAM_P_YAW)->value();
    writeFile(SPIFFS, "/pYaw.txt", inputMessage.c_str());
  } else if (request->hasParam(PARAM_I_YAW)) {
    inputMessage = request->getParam(PARAM_I_YAW)->value();
    writeFile(SPIFFS, "/iYaw.txt", inputMessage.c_str());
  } else if (request->hasParam(PARAM_D_YAW)) {
    inputMessage = request->getParam(PARAM_D_YAW)->value();
    writeFile(SPIFFS, "/dYaw.txt", inputMessage.c_str());
  }
 else if (request->hasParam(PARAM_TIME_CYCLE)) {
    inputMessage = request->getParam(PARAM_TIME_CYCLE)->value();
    writeFile(SPIFFS, "/tc.txt", inputMessage.c_str());
  }
    else {
      inputMessage = "No message sent";
    }
    Serial.println(inputMessage);
    request->send(200, "text/text", inputMessage);
  });

  server.onNotFound(notFound);
  server.begin();
//WIFI server setup END

  Wire.setClock(400000);
  Wire.begin(SDA_pin, SCL_pin);
  delay(250);

  Wire.beginTransmission(0x68);
  Wire.write(0x6B);
  Wire.write(0x00);
  Wire.endTransmission();

  ESP32PWM::allocateTimer(0);
  ESP32PWM::allocateTimer(1);
  ESP32PWM::allocateTimer(2);
  ESP32PWM::allocateTimer(3);
  
  delay(1000);
  esc1.attach(ESC_PIN1,1000,2000);
  delay(1000);
  esc1.setPeriodHertz(ESCfreq);
  delay(100);
  esc2.attach(ESC_PIN2,1000,2000);
  delay(1000);
  esc2.setPeriodHertz(ESCfreq);
  delay(100);
  esc3.attach(ESC_PIN3,1000,2000);
  delay(1000);
  esc3.setPeriodHertz(ESCfreq);
  delay(100);
  esc4.attach(ESC_PIN4,1000,2000);
  delay(1000);
  esc4.setPeriodHertz(ESCfreq);
  delay(100);

  esc1.writeMicroseconds(1000);
  esc2.writeMicroseconds(1000);
  esc3.writeMicroseconds(1000);
  esc4.writeMicroseconds(1000);
  delay(500);

  
//  for(RateCalibrationNumber=0;RateCalibrationNumber<2000;RateCalibrationNumber++){
//    gyro_signals();
//    RateCalibrationRoll+=RateRoll;
//    RateCalibrationPitch+=RatePitch;
//    RateCalibrationYaw+=RateYaw;
//    delay(1);
//  }
//  RateCalibrationRoll/=2000;
//  RateCalibrationPitch/=2000;
//  RateCalibrationYaw/=2000;

  // Initialize SPI with custom pins
  SPI.begin(SCK_PIN, MISO_PIN, MOSI_PIN, CSN_PIN);
   // NRF24L01 Setup
  if (!radio.begin()) {
        Serial.println("Radio hardware not responding!");
        while (1);  // Halt execution if radio fails
    }
  radio.openReadingPipe(0, address);
  radio.setPALevel(RF24_PA_HIGH);
  radio.setDataRate(RF24_250KBPS);
  radio.startListening();  // Set as receiver
  Serial.println("NRF24 Receiver Ready!");

  strip.begin();           // Initialize the strip
  strip.show();            // Turn off all LEDs
  strip.setBrightness(25); // Set brightness (0-255)

  Serial.println("final setup step!");
  delay(1000);


  // ========= Status Check + LED Logic =========
  bool allGood = true;

  // Check WiFi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi check failed!");
    allGood = false;
  }

  // Check NRF24
  if (!radio.isChipConnected()) {
    Serial.println("NRF24 check failed!");
    allGood = false;
  }

  // Check MPU6050
  Wire.beginTransmission(0x68);
  if (Wire.endTransmission() != 0) {
    Serial.println("MPU6050 not detected!");
    allGood = false;
  }

  // Check if transmitter is sending data
  bool transmitterOK = false;
  unsigned long startTime = millis();

  Serial.println("Checking transmitter communication...");
  while (millis() - startTime < 3000) {  // wait for up to 3 seconds
    if (radio.available()) {
      radio.read(&receivedData, sizeof(receivedData));  // replace with your actual data struct
      transmitterOK = true;
      Serial.println("â Transmitter communication OK.");
      break;
    }
  }
  if (!transmitterOK) {
    Serial.println("â No data received from transmitter!");
    allGood = false;
  }

  // ESC write signal (basic assumption of OK)
  esc1.writeMicroseconds(1000);
  esc2.writeMicroseconds(1000);
  esc3.writeMicroseconds(1000);
  esc4.writeMicroseconds(1000);

  

  // LED Feedback
  if (allGood) {
    for (int i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(0, 255, 0));  // Green
    }
    strip.show();
    Serial.println("â All systems OK. Green LED ON.");
  } else {
    for (int i = 0; i < strip.numPixels(); i++) {
      strip.setPixelColor(i, strip.Color(255, 0, 0));  // Red
    }
    strip.show();
    Serial.println("â One or more systems failed. Red LED ON.");
  }


  LoopTimer=micros();
}

void loop() {
  
//  setRGBColor(255, 0, 0);  // Green
//  unsigned long currentTime = millis();
//  // Run the health check every 10 seconds
//  if (currentTime - lastCheckTime >= checkInterval) {
//    lastCheckTime = currentTime;
//    checkSystemHealth();
//  }
//  
  gyro_signals();
//  RateRoll-=RateCalibrationRoll;
//  RatePitch-=RateCalibrationPitch;
//  RateYaw-=RateCalibrationYaw;
//  Serial.print("Roll rate [Â°/s]= ");
//  Serial.print(RateRoll);
//  Serial.print(" Pitch Rate [Â°/s]= ");
//  Serial.print(RatePitch);
//  Serial.print(" Yaw Rate [Â°/s]= ");
//  Serial.println(RateYaw);
//
//  Serial.print("Roll angle [Â°]= ");
//  Serial.print(AngleRoll);
//  Serial.print(" Pitch angle [Â°]= ");
//  Serial.println(AnglePitch);
//  delay(50);

float PRateRoll=readFile(SPIFFS, "/pGain.txt").toFloat(); ; float PRatePitch=PRateRoll;
float IRateRoll=readFile(SPIFFS, "/iGain.txt").toFloat(); ; float IRatePitch=IRateRoll;
float DRateRoll=readFile(SPIFFS, "/dGain.txt").toFloat(); ; float DRatePitch=DRateRoll;

PAngleRoll=readFile(SPIFFS, "/pAGain.txt").toFloat();; 
IAngleRoll=readFile(SPIFFS, "/iAGain.txt").toFloat();; 
DAngleRoll=readFile(SPIFFS, "/dAGain.txt").toFloat();; 

PAnglePitch=PAngleRoll;
IAnglePitch=IAngleRoll;
DAnglePitch=DAngleRoll;

PRateYaw = readFile(SPIFFS, "/pYaw.txt").toFloat();
IRateYaw = readFile(SPIFFS, "/iYaw.txt").toFloat();
DRateYaw = readFile(SPIFFS, "/dYaw.txt").toFloat();


complementaryAngleRoll=0.991*(complementaryAngleRoll+RateRoll*t) + 0.009*AngleRoll;
complementaryAnglePitch=0.991*(complementaryAnglePitch+RatePitch*t) + 0.009*AnglePitch;
// Clamping complementary filter roll angle to Â±20 degrees
complementaryAngleRoll = (complementaryAngleRoll > 20) ? 20 : ((complementaryAngleRoll < -20) ? -20 : complementaryAngleRoll);
complementaryAnglePitch = (complementaryAnglePitch > 20) ? 20 : ((complementaryAnglePitch < -20) ? -20 : complementaryAnglePitch);

  if (radio.available()) {
    radio.read(&receivedData, sizeof(receivedData));  // Read data from transmitter

//    kalman_1d(KalmanAngleRoll,KalmanUncertaintyAngleRoll, RateRoll, AngleRoll);
//    KalmanAngleRoll=Kalman1DOutput[0];
//    KalmanUncertaintyAngleRoll=Kalman1DOutput[1];
//    kalman_1d(KalmanAnglePitch,KalmanUncertaintyAnglePitch, RatePitch, AnglePitch);
//    KalmanAnglePitch=Kalman1DOutput[0];
//    KalmanUncertaintyAnglePitch=Kalman1DOutput[1];
//    KalmanAngleRoll = (KalmanAngleRoll > 20) ? 20 : ((KalmanAngleRoll < -20) ? -20 : KalmanAngleRoll);
//    KalmanAnglePitch = (KalmanAnglePitch > 20) ? 20 : ((KalmanAnglePitch < -20) ? -20 : KalmanAnglePitch);

    
    DesiredAngleRoll=0.10*(receivedData.roll - 1000);
    DesiredAnglePitch=0.10*(receivedData.pitch - 1000);
    DesiredRateYaw=0.15*(receivedData.yaw - 1000);
    InputThrottle=receivedData.throttle;

//    ErrorAngleRoll=DesiredAngleRoll-KalmanAngleRoll;
//    ErrorAnglePitch=DesiredAnglePitch-KalmanAnglePitch;
    
    ErrorAngleRoll=DesiredAngleRoll-complementaryAngleRoll;
    ErrorAnglePitch=DesiredAnglePitch-complementaryAnglePitch;

    pid_equation(ErrorAngleRoll, PAngleRoll,IAngleRoll, DAngleRoll, PrevErrorAngleRoll,PrevItermAngleRoll);     
      //DesiredRateRoll=PIDReturn[0];
      InputRoll= PIDReturn[0];
      PrevErrorAngleRoll=PIDReturn[1];
      PrevItermAngleRoll=PIDReturn[2];
    pid_equation(ErrorAnglePitch, PAnglePitch,IAnglePitch, DAnglePitch, PrevErrorAnglePitch,PrevItermAnglePitch);
      //DesiredRatePitch=PIDReturn[0];
      InputPitch= PIDReturn[0];
      PrevErrorAnglePitch=PIDReturn[1];
      PrevItermAnglePitch=PIDReturn[2];
      
//    ErrorRateRoll=DesiredRateRoll-RateRoll;
//    ErrorRatePitch=DesiredRatePitch-RatePitch;
    ErrorRateYaw=DesiredRateYaw-RateYaw;

//    pid_equation(ErrorRateRoll, PRateRoll, IRateRoll,DRateRoll, PrevErrorRateRoll,PrevItermRateRoll);
//      InputRoll=PIDReturn[0];
//      PrevErrorRateRoll=PIDReturn[1];
//      PrevItermRateRoll=PIDReturn[2];
//    pid_equation(ErrorRatePitch, PRatePitch,IRatePitch, DRatePitch, PrevErrorRatePitch,PrevItermRatePitch);
//      InputPitch=PIDReturn[0];
//      PrevErrorRatePitch=PIDReturn[1];
//      PrevItermRatePitch=PIDReturn[2];
    pid_equation(ErrorRateYaw, PRateYaw,IRateYaw, DRateYaw, PrevErrorRateYaw,PrevItermRateYaw);
      InputYaw=PIDReturn[0];
      PrevErrorRateYaw=PIDReturn[1];
      PrevItermRateYaw=PIDReturn[2];

    if (InputThrottle > 1800) {
      InputThrottle = 1800;
    }


//    Serial.printf("Raw Speeds - InputRoll: %.2f | InputPitch: %.2f | InputYaw: %.2f | InputThrottle: %.2f\n", 
//    InputRoll,
//    InputPitch,
//    InputYaw,
//    InputThrottle);
    
    // Apply throttle & directional adjustments
    MotorInput1= (InputThrottle-InputRoll-InputPitch-InputYaw);
    MotorInput2= (InputThrottle-InputRoll+InputPitch+InputYaw);
    MotorInput3= (InputThrottle+InputRoll+InputPitch-InputYaw);
    MotorInput4= (InputThrottle+InputRoll-InputPitch+InputYaw);

    if (MotorInput1 > 2000)
    {
      MotorInput1 = 1999;
    }

    if (MotorInput2 > 2000)
    {
      MotorInput2 = 1999;
    }

    if (MotorInput3 > 2000)
    {
      MotorInput3 = 1999;
    }

    if (MotorInput4 > 2000)
    {
      MotorInput4 = 1999;
    }
  
    if (MotorInput1 < 1050)
    {
      MotorInput1 = 1000;
    }
    if (MotorInput2 < 1050)
    {
      MotorInput2 = 1000;
    }
    if (MotorInput3 < 1050)
    {
      MotorInput3 = 1000;
    }
    if (MotorInput4 < 1050)
    {
      MotorInput4 = 1000;
    }   
    
    if (receivedData.throttle < 1050){
      MotorInput1 = 1000;
      MotorInput2 = 1000;
      MotorInput3 = 1000;
      MotorInput4 = 1000;
      reset_pid();
      }

    // Send PWM signals to ESCs
    esc1.writeMicroseconds(MotorInput1);
    esc2.writeMicroseconds(MotorInput2);
    esc3.writeMicroseconds(MotorInput3);
    esc4.writeMicroseconds(MotorInput4);

  }
    while (micros() - LoopTimer < 4000);{
    LoopTimer=micros();
    }

    // Debugging output
//    Serial.print("Throttle: "); Serial.print(receivedData.throttle);
//    Serial.print(" | Yaw: "); Serial.print(receivedData.yaw);
//    Serial.print(" | Pitch: "); Serial.print(receivedData.pitch);
//    Serial.print(" | Roll: "); Serial.print(receivedData.roll);
////    
//    Serial.print(" || M1: "); Serial.print(MotorInput1);
//    Serial.print(" | M2: "); Serial.print(MotorInput2);
//    Serial.print(" | M3: "); Serial.print(MotorInput3);
//    Serial.print(" | M4: "); Serial.println(MotorInput4);
}
